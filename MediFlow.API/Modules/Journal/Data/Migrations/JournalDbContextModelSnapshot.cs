// <auto-generated />
using System;
using MediFlow.API.Modules.Journal.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MediFlow.API.Modules.Journal.Data.Migrations
{
    [DbContext(typeof(JournalDbContext))]
    partial class JournalDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.5");

            modelBuilder.Entity("MediFlow.API.Modules.Journal.Domain.Notes.Note", b =>
                {
                    b.Property<string>("NoteId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("NoteBody")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NoteTag")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TargetPersonId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("NoteId");

                    b.HasIndex("TargetPersonId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("MediFlow.API.Modules.Journal.Domain.OrdinatoryRecords.OrdinatoryRecord", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("MedicineName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TargetPersonId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TargetPersonId");

                    b.ToTable("OrdinatoryRecord");
                });

            modelBuilder.Entity("MediFlow.API.Modules.Journal.Domain.Persons.Person", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("MediFlow.API.Modules.Journal.Domain.Notes.Note", b =>
                {
                    b.HasOne("MediFlow.API.Modules.Journal.Domain.Persons.Person", "TargetPerson")
                        .WithMany("NotesAbout")
                        .HasForeignKey("TargetPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TargetPerson");
                });

            modelBuilder.Entity("MediFlow.API.Modules.Journal.Domain.OrdinatoryRecords.OrdinatoryRecord", b =>
                {
                    b.HasOne("MediFlow.API.Modules.Journal.Domain.Persons.Person", "TargetPerson")
                        .WithMany("OrdinatoryList")
                        .HasForeignKey("TargetPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TargetPerson");
                });

            modelBuilder.Entity("MediFlow.API.Modules.Journal.Domain.Persons.Person", b =>
                {
                    b.Navigation("NotesAbout");

                    b.Navigation("OrdinatoryList");
                });
#pragma warning restore 612, 618
        }
    }
}
